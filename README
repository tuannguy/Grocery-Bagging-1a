# Grocery-Bagging-1a
Cs 457 Project 1
Tuan Nguyen
Lam Nguyen
Connor Wood
----------------======


Design

(Connor) -- I had created a simple file parser to create a list of Item-objects from an input file and pass on each description to the item it belongs to.  In other words, it detects the first word in an item line as the grocery's name, then considers the constraint it may posses, followed by adding the list of items that it can only be bagged/not be bagged with to that respective
grocery.  The list of items constrained to the grocery in question are put as strings as to make processing and lookups easier.

(Lam and Tuan) -- Tuan tried to use Clique graph algorithm to solve the problem but didn't had much luck finding a way to implement BFS, I also made a brute force way to implement DFS but also got struggled making BFS, so we came up with using "Partition" to solve both DFS and BFS.

The Partition class is used to divide a list of items into all combinations of k subsets as k is the input integer, i.e. a list of <1,2,3> and k=2 will result in <(1,2),3>, <(1,3),2>, <(2,3),1>. It can be used to find all solutions for breadth-first search, or simply find one first good solution for depth-first.

The Bag class is the bag object to carry item objects, which is using Item class. Bag has maxsize, currentSize variable and bagItems arrayList to add the Item objects in. Its toString() will print the name of every item in that bag.

Item class has name, size, constraint variables and ArrayList<String> forbidden. "constraint" is a int variable that if it equals 1, it means "+" constraint and =-1 means otherwise, and 0 means it has no constraint.

GroceryBagging is the driver class that has a parseFile(filename) method, dfs(), bfs() methods that uses Partition, and a main method.


Testing

(Connor) -- With the file parser, I made sure to include code that considers invalid inputs.  For example, since each grocery should only contain a single '+' or '-', then if there are either both or more than one of either constraint, the program will send an error message then exit.  Similarly, if there's to be a list of items at all, there needs to be a constraint to begin with.  So thankfully the parser checks to make sure a list of items does not follow without a single '+' or '-' appearing first.

(Lam and Tuan) -- With the Clique graph algorithm, we got it to work with the example input from the project description. However, when we made a few changes to that input, there were many problems that shown up. For example, here are a few of them: mishandling of items that did not have constraint on what items they could be put with; missing items in the result, and mostly just wrong results that didn't follow input constraints.

With the partition approach (brute force), it went much smoother. There were fewer problems. The main ones were the inclusion of empty bags in the result set, duplicating results, and the handling of user input argument.

Experimental results

Test1:

input:
3
7
bread  3 + rolls
rolls  2 + bread
squash 3 - meat
meat   5
lima_beans 1 - meat

output: just the textfile in the argument
Success

output: DFS
Success
bread	rolls
squash	lima_beans
meat

output: BFS
Success
bread	rolls
squash	lima_beans
meat

Test2:

input:
4
7
bread  3
rolls  2 + bread
squash 3 - meat
meat   5
lima_beans 1

output: just the textfile in the argument
Success

output: DFS
Success
bread	rolls
squash	lima_beans
meat

output: BFS
Success
bread	rolls
squash	lima_beans
meat
Success
bread	rolls
squash
meat	lima_beans
Success
bread	squash	lima_beans
rolls
meat
Success
bread	squash
rolls
meat	lima_beans
Success
bread	rolls
squash
meat
lima_beans
Success
bread	squash
rolls
meat
lima_beans
Success
bread	lima_beans
rolls
squash
meat
Success
bread
rolls
squash	lima_beans
meat
Success
bread
rolls
squash
meat	lima_beans

Test3:

input:
3
7
bread  3
rolls  2 + bread
squash 3 - meat
meat   5 + bread
lima_beans 1 + meat

output: just the textfile in the argument
Failure

output: DFS
Failure

output: BFS
Failure

Test4:

input:
15
7
bread  3
rolls  2 + bread
squash 3 - meat
meat   5 + bread
lima_beans 1 + meat

output: just the textfile in the argument
Failure

output: DFS
Failure

output: BFS
Success
bread	rolls
squash
meat
lima_beans
Success
bread	squash
rolls
meat
lima_beans
Success
bread
rolls
squash
meat
lima_beans